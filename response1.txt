{
  status: 201,
  statusText: 'Created',
  headers: AxiosHeaders {
    date: 'Thu, 23 Mar 2023 05:48:16 GMT',
    'content-type': 'application/json;charset=UTF-8',
    'transfer-encoding': 'chunked',
    connection: 'keep-alive',
    'x-site-id': 'MLB',
    'x-response-status': 'pending/pending_waiting_transfer',
    'x-caller-id': '153008473',
    vary: 'Accept,Accept-Encoding',
    'cache-control': 'max-age=0',
    etag: 'c4d4acbbe592073edfc55903d94a3ebc',
    'x-content-type-options': 'nosniff',
    'x-request-id': '07cf23f8-b762-4a2d-b2d6-0296fb2e4aab',
    'x-xss-protection': '1; mode=block',
    'strict-transport-security': 'max-age=16070400; includeSubDomains; preload',
    'access-control-allow-origin': '*',
    'access-control-allow-headers': 'Content-Type',
    'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
    'access-control-max-age': '86400',
    'timing-allow-origin': '*'
  },
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: AxiosHeaders {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473',
      'User-Agent': 'axios/1.3.4',
      'Content-Length': '482',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'https://api.mercadopago.com/v1',
    method: 'post',
    url: '/payments',
    data: '{"date_of_expiration":"2023-03-23T03:18:15.935-03:00","payment_method_id":"pix","transaction_amount":12,"description":"10 coins pack","notification_url":"http://143.0.20.85:3333/mercado-pago-pix/notification","statement_descriptor":"Tibia Project","payer":{"first_name":"SoulsTom","email":"manthovaniusa@gmail.com"},"metadata":{"order_id":1,"products":[{"id":1,"title":"10 coins pack","description":"Virtual coins to be used at www.tibiaProject.com","quantity":1,"unit_price":12}]}}'
  },
  request: <ref *3> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '482',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadopago.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: bound onceWrapper] {
          listener: [Function: freeSocketErrorListener]
        }
      },
      _eventsCount: 9,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadopago.com',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 17441,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 120,
        [Symbol(triggerId)]: 118
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: null,
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473',
          'User-Agent': 'axios/1.3.4',
          'Content-Length': '482',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'api.mercadopago.com',
        port: 443,
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {
                'api.mercadopago.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadopago.com:443:::::::::::::::::::::': <Buffer 30 82 07 cb 02 01 01 02 02 03 03 04 02 c0 2f 04 20 a8 f7 2a bd 68 d2 8f 85 ce 4c ad 23 10 ff a4 8e 39 08 75 d5 a4 63 a2 31 21 24 a8 e3 c5 69 30 ad 04 ... 1949 more bytes>
                },
                list: [ 'api.mercadopago.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/v1/payments',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {
            'api.mercadopago.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadopago.com:443:::::::::::::::::::::': <Buffer 30 82 07 cb 02 01 01 02 02 03 03 04 02 c0 2f 04 20 a8 f7 2a bd 68 d2 8f 85 ce 4c ad 23 10 ff a4 8e 39 08 75 d5 a4 63 a2 31 21 24 a8 e3 c5 69 30 ad 04 ... 1949 more bytes>
            },
            list: [ 'api.mercadopago.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadopago.com',
        keepAlive: true,
        scheduling: 'lifo',
        timeout: 5000,
        noDelay: true,
        servername: 'api.mercadopago.com',
        _agentKey: 'api.mercadopago.com:443:::::::::::::::::::::',
        encoding: null,
        keepAliveInitialDelay: 1000
      }
    },
    _header: 'POST /v1/payments HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'Authorization: Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473\r\n' +
      'User-Agent: axios/1.3.4\r\n' +
      'Content-Length: 482\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: api.mercadopago.com\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *2> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        keepAlive: true,
        scheduling: 'lifo',
        timeout: 5000,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {
        'api.mercadopago.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadopago.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: bound onceWrapper] {
                listener: [Function: freeSocketErrorListener]
              }
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadopago.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            timeout: 5000,
            parser: null,
            _httpMessage: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 5000,
              _idlePrev: [TimersList],
              _idleNext: [TimersList],
              _idleStart: 17441,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 120,
              [Symbol(triggerId)]: 118
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                Authorization: 'Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '482',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'api.mercadopago.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *2],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/v1/payments',
              _defaultAgent: [Circular *2],
              host: 'api.mercadopago.com',
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              servername: 'api.mercadopago.com',
              _agentKey: 'api.mercadopago.com:443:::::::::::::::::::::',
              encoding: null,
              keepAliveInitialDelay: 1000
            }
          }
        ]
      },
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadopago.com:443:::::::::::::::::::::': <Buffer 30 82 07 cb 02 01 01 02 02 03 03 04 02 c0 2f 04 20 a8 f7 2a bd 68 d2 8f 85 ce 4c ad 23 10 ff a4 8e 39 08 75 d5 a4 63 a2 31 21 24 a8 e3 c5 69 30 ad 04 ... 1949 more bytes>
        },
        list: [ 'api.mercadopago.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'POST',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/v1/payments',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Date',
        'Thu, 23 Mar 2023 05:48:16 GMT',
        'Content-Type',
        'application/json;charset=UTF-8',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'keep-alive',
        'x-site-id',
        'MLB',
        'x-response-status',
        'pending/pending_waiting_transfer',
        'x-caller-id',
        '153008473',
        'vary',
        'Accept,Accept-Encoding',
        'cache-control',
        'max-age=0',
        'etag',
        'c4d4acbbe592073edfc55903d94a3ebc',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '07cf23f8-b762-4a2d-b2d6-0296fb2e4aab',
        'X-XSS-Protection',
        '1; mode=block',
        'Strict-Transport-Security',
        'max-age=16070400; includeSubDomains; preload',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'Timing-Allow-Origin',
        '*'
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 201,
      statusMessage: 'Created',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadopago.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: bound onceWrapper] {
            listener: [Function: freeSocketErrorListener]
          }
        },
        _eventsCount: 9,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadopago.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        timeout: 5000,
        parser: null,
        _httpMessage: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: -1,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 5000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 17441,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 120,
          [Symbol(triggerId)]: 118
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 1,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473',
            'User-Agent': 'axios/1.3.4',
            'Content-Length': '482',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'api.mercadopago.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {
                  'api.mercadopago.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                keepAliveMsecs: 1000,
                keepAlive: true,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadopago.com:443:::::::::::::::::::::': <Buffer 30 82 07 cb 02 01 01 02 02 03 03 04 02 c0 2f 04 20 a8 f7 2a bd 68 d2 8f 85 ce 4c ad 23 10 ff a4 8e 39 08 75 d5 a4 63 a2 31 21 24 a8 e3 c5 69 30 ad 04 ... 1949 more bytes>
                  },
                  list: [ 'api.mercadopago.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/v1/payments',
          _defaultAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {
              'api.mercadopago.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadopago.com:443:::::::::::::::::::::': <Buffer 30 82 07 cb 02 01 01 02 02 03 03 04 02 c0 2f 04 20 a8 f7 2a bd 68 d2 8f 85 ce 4c ad 23 10 ff a4 8e 39 08 75 d5 a4 63 a2 31 21 24 a8 e3 c5 69 30 ad 04 ... 1949 more bytes>
              },
              list: [ 'api.mercadopago.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadopago.com',
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          servername: 'api.mercadopago.com',
          _agentKey: 'api.mercadopago.com:443:::::::::::::::::::::',
          encoding: null,
          keepAliveInitialDelay: 1000
        }
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *3],
      responseUrl: 'https://api.mercadopago.com/v1/payments',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        date: 'Thu, 23 Mar 2023 05:48:16 GMT',
        'content-type': 'application/json;charset=UTF-8',
        'transfer-encoding': 'chunked',
        connection: 'keep-alive',
        'x-site-id': 'MLB',
        'x-response-status': 'pending/pending_waiting_transfer',
        'x-caller-id': '153008473',
        vary: 'Accept,Accept-Encoding',
        'cache-control': 'max-age=0',
        etag: 'c4d4acbbe592073edfc55903d94a3ebc',
        'x-content-type-options': 'nosniff',
        'x-request-id': '07cf23f8-b762-4a2d-b2d6-0296fb2e4aab',
        'x-xss-protection': '1; mode=block',
        'strict-transport-security': 'max-age=16070400; includeSubDomains; preload',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'timing-allow-origin': '*'
      },
      [Symbol(kHeadersCount)]: 38,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadopago.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: '/v1/payments',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473',
          'User-Agent': 'axios/1.3.4',
          'Content-Length': '482',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'api.mercadopago.com',
        port: '',
        agent: undefined,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {
                'api.mercadopago.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadopago.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: bound onceWrapper] {
                        listener: [Function: freeSocketErrorListener]
                      }
                    },
                    _eventsCount: 9,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadopago.com',
                    _closeAfterHandlingError: false,
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: false,
                      needDrain: false,
                      ending: false,
                      ended: false,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 0,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    timeout: 5000,
                    parser: null,
                    _httpMessage: null,
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: -1,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: Timeout {
                      _idleTimeout: 5000,
                      _idlePrev: [TimersList],
                      _idleNext: [TimersList],
                      _idleStart: 17441,
                      _onTimeout: [Function: bound ],
                      _timerArgs: undefined,
                      _repeat: null,
                      _destroyed: false,
                      [Symbol(refed)]: false,
                      [Symbol(kHasPrimitive)]: false,
                      [Symbol(asyncId)]: 120,
                      [Symbol(triggerId)]: 118
                    },
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 1,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'https:',
                      path: null,
                      method: 'POST',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        Authorization: 'Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473',
                        'User-Agent': 'axios/1.3.4',
                        'Content-Length': '482',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'api.mercadopago.com',
                      port: 443,
                      agent: undefined,
                      nativeProtocols: [Circular *4],
                      pathname: '/v1/payments',
                      _defaultAgent: [Circular *2],
                      host: 'api.mercadopago.com',
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      servername: 'api.mercadopago.com',
                      _agentKey: 'api.mercadopago.com:443:::::::::::::::::::::',
                      encoding: null,
                      keepAliveInitialDelay: 1000
                    }
                  }
                ]
              },
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadopago.com:443:::::::::::::::::::::': <Buffer 30 82 07 cb 02 01 01 02 02 03 03 04 02 c0 2f 04 20 a8 f7 2a bd 68 d2 8f 85 ce 4c ad 23 10 ff a4 8e 39 08 75 d5 a4 63 a2 31 21 24 a8 e3 c5 69 30 ad 04 ... 1949 more bytes>
                },
                list: [ 'api.mercadopago.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/v1/payments'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 482,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *3],
      _currentUrl: 'https://api.mercadopago.com/v1/payments',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kEndCalled)]: true,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-4111329125078087-031215-171db2630e0f050d3091bdabe79d72ad-153008473'
      ],
      'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
      'content-length': [ 'Content-Length', '482' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'api.mercadopago.com' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kUniqueHeaders)]: null
  },
  data: {
    id: 56068176708,
    date_created: '2023-03-23T01:48:16.453-04:00',
    date_approved: null,
    date_last_updated: '2023-03-23T01:48:16.453-04:00',
    date_of_expiration: '2023-03-23T02:18:15.935-04:00',
    money_release_date: null,
    money_release_status: null,
    operation_type: 'regular_payment',
    issuer_id: null,
    payment_method_id: 'pix',
    payment_type_id: 'bank_transfer',
    payment_method: { id: 'pix', type: 'bank_transfer' },
    status: 'pending',
    status_detail: 'pending_waiting_transfer',
    currency_id: 'BRL',
    description: '10 coins pack',
    live_mode: true,
    sponsor_id: null,
    authorization_code: null,
    money_release_schema: null,
    taxes_amount: 0,
    counter_currency: null,
    brand_id: null,
    shipping_amount: 0,
    build_version: '2.137.4',
    pos_id: null,
    store_id: null,
    integrator_id: null,
    platform_id: null,
    corporation_id: null,
    payer: {
      type: null,
      id: '1336746374',
      operator_id: null,
      email: null,
      identification: { type: null, number: null },
      phone: { area_code: null, number: null, extension: null },
      first_name: null,
      last_name: null,
      entity_type: null
    },
    collector_id: 153008473,
    marketplace_owner: null,
    metadata: {
      order_id: 1,
      products: [
        {
          quantity: 1,
          description: 'Virtual coins to be used at www.tibiaProject.com',
          id: 1,
          title: '10 coins pack',
          unit_price: 12
        }
      ]
    },
    additional_info: {
      available_balance: null,
      nsu_processadora: null,
      authentication_code: null
    },
    order: {},
    external_reference: null,
    transaction_amount: 12,
    transaction_amount_refunded: 0,
    coupon_amount: 0,
    differential_pricing_id: null,
    financing_group: null,
    deduction_schema: null,
    callback_url: null,
    installments: 1,
    transaction_details: {
      payment_method_reference_id: null,
      acquirer_reference: null,
      net_received_amount: 0,
      total_paid_amount: 12,
      overpaid_amount: 0,
      external_resource_url: null,
      installment_amount: 0,
      financial_institution: null,
      payable_deferral_period: null,
      bank_transfer_id: null,
      transaction_id: null
    },
    fee_details: [],
    charges_details: [
      {
        id: '56068176708-001',
        name: 'mercadopago_fee',
        type: 'fee',
        accounts: { from: 'collector', to: 'mp' },
        client_id: 0,
        date_created: '2023-03-23T01:48:16.455-04:00',
        last_updated: '2023-03-23T01:48:16.455-04:00',
        amounts: { original: 0.12, refunded: 0 },
        metadata: {},
        reserve_id: null,
        refund_charges: []
      }
    ],
    captured: true,
    binary_mode: false,
    call_for_authorize_id: null,
    statement_descriptor: null,
    card: {},
    notification_url: 'http://143.0.20.85:3333/mercado-pago-pix/notification',
    refunds: [],
    processing_mode: 'aggregator',
    merchant_account_id: null,
    merchant_number: null,
    acquirer_reconciliation: [],
    point_of_interaction: {
      type: 'OPENPLATFORM',
      business_info: { unit: 'online_payments', sub_unit: 'default' },
      location: { state_id: null, source: null },
      application_data: { name: null, version: null },
      transaction_data: {
        qr_code: '00020126450014br.gov.bcb.pix0123manthovaniusa@gmail.com520400005303986540512.005802BR5925MARCOSVINICIUSMANTOVANIES6008So Paulo62240520mpqrinter56068176708630451F3',
        bank_transfer_id: null,
        transaction_id: null,
        e2e_id: null,
        financial_institution: null,
        ticket_url: 'https://www.mercadopago.com.br/payments/56068176708/ticket?caller_id=1336746374&hash=40e87935-cc94-4b43-9896-c45182131098',
        bank_info: {
          payer: {
            account_id: null,
            id: null,
            long_name: null,
            external_account_id: null
          },
          collector: {
            account_id: null,
            long_name: null,
            account_holder_name: 'Marcos Vinicius Mantovani E Silva',
            transfer_account_id: null
          },
          is_same_bank_account_owner: null,
          origin_bank_id: null,
          origin_wallet_id: null
        },
        qr_code_base64: 'iVBORw0KGgoAAAANSUhEUgAABWQAAAVkAQAAAAB79iscAAAIvklEQVR42u3dW4rtNhAFUM1A85+lZ6CQwE3bqi2dE7iExFr+aDgvebn/NlUqtfE/uq5GS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS/v7tW2++p/v/frz53cfH/y6/vrg59P7y58FFouW5Xtm0NLS0tLS0tLS0tLSHqLt98j289P7p481/17ksfCPezyfarnoeK5cGbS0tLS0tLS0tLS0tOdoS9arN8uR86H9ASwz5v2Wy/t2WlpaWlpaWlpaWlpa2ikYXs+w2PMT3JNlK9pczusbPC0tLS0tLS0tLS0t7ena6StTdS/FwVTT+/nZ9KRXLgDS0tLS0tLS0tLS0tKeqE0vS/7bNWGmn5WXqbrXPzFoaWlpaWlpaWlpaWnfr91NKfkX//yGmSq0tLS0tLS0tLS0tLT/R226lqNKyjevHDRLJkxRsrXvDhegpaWlpaWlpaWlpaV9u7aO4t90RKbmyhRDd1+Zls/36LS0tLS0tLS0tLS0tCdpp0yYPkjJsswmmXa0LRout4mxbbsuaWlpaWlpaWlpaWlp36gdX83tT7vclucALCt5mxGSaZAJLS0tLS0tLS0tLS3tAdqp6LZPltP51aUy+KBMTZi5eHi19cQUWlpaWlpaWlpaWlra47SPdJiu3BY5NXC2ZxKc8ItoujxSgJaWlpaWlpaWlpaW9ghtqrxN723SYWu7amEvq0z3/Sddl7S0tLS0tLS0tLS0tO/TFuhyjMhjb1vOf7v3yv+m7qTLdT5aWlpaWlpaWlpaWtq3a6cWyNpwWRZe9GmWHXK7OZLTemlgJS0tLS0tLS0tLS0t7UnadIvpjLXdkMjUhFlqhOOrswFoaWlpaWlpaWlpaWkP05Z62/g8QnKUjWsT+V4ZrIXCewPnV+NQaGlpaWlpaWlpaWlp363toc43Vnvg2vO9qWny2jxLmuW/6cSkpaWlpaWlpaWlpaU9R9uKMZf4pg9a2BI3KfZHACzaNkuVkJaWlpaWlpaWlpaW9u3aFAdTT2ZbPcbkeWyJu4fK2maZ/g/fZF5aWlpaWlpaWlpaWtoXafNetBoHp/7LDJ1i4wgvU5vlYiQlLS0tLS0tLS0tLS3tIdqrzaFyuUNuM/Kx3jb3VfZnNK3NmrS0tLS0tLS0tLS0tIdpc+Wtfx5a0kIwHJsTr0v9ri7wZS2SlpaWlpaWlpaWlpb2VdpcVkvNkKM0XBbZFRopp47NRY9n3iFHS0tLS0tLS0tLS0t7gPaLPXDpoLWc/6aS4bV6bzGmctXASUtLS0tLS0tLS0tL+2Zt4fUw6T9NKWn53ql+l6p7aYdcOkublpaWlpaWlpaWlpb2CG2aUpKrdqkoWFsv8x64mjtLo2cPS9HS0tLS0tLS0tLS0r5de5XpI6lBMsW85Ya56cslgfYwkrI2YdLS0tLS0tLS0tLS0h6hTRMby561mvX229ryelPavPJT0dLS0tLS0tLS0tLSHqZNijQBMu18Sz8rf1qLe+/yKrS0tLS0tLS0tLS0tOdpy+DIkcnT9/LJ2CkTppn/Y/vbTzNVaGlpaWlpaWlpaWlpX6W981IL5BWmR/bnbRe/zZ62mXpCS0tLS0tLS0tLS0t7pjblxLbdA7e/xRWyY8tZdMqTeY4kLS0tLS0tLS0tLS3tUdpp8EjpupyWW5x4nbsp99rU90lLS0tLS0tLS0tLS3uAdj9LpETJaZZ/bZXMQydbOPt65J+N+aKlpaWlpaWlpaWlpX27tl5TOszPUnojv6nfLTPm8r60tLS0tLS0tLS0tLRv16bjrKd6W9o6t4yhJUXujtFOWfTzKdi0tLS0tLS0tLS0tLQv047c/ZjKb8tOzLKZrX6vDDdZ/IM+z1ShpaWlpaWlpaWlpaV9lXaT9ergkVKNW8bQHvo5H89SImfPJwzQ0tLS0tLS0tLS0tK+XVvKeYsRkvf6XQsPNMptl4P/y165ej4bLS0tLS0tLS0tLS3tSdqxOva65/kiqUFyf+9SSEwz/5OFlpaWlpaWlpaWlpb2AG0Od4uYlyPnonMyzxxJqyxyJy0tLS0tLS0tLS0t7RHa3Dm5KOctz0RLfZV5BmV77qQbWfuk0dLS0tLS0tLS0tLSvlubDkabanApIi6KgiVATmExHc02wpD/TktLS0tLS0tLS0tLe5Z213A5feWruY91ouRy0n8+fZuWlpaWlpaWlpaWlvYc7eZrLY8bWcbBWt1LlPvLxziUVDekpaWlpaWlpaWlpaU9R5uTYM+tl8uH3MwrGblZM/daDlpaWlpaWlpaWlpa2kO0ZUpJLwGyhevuuVYnXrdntbCGzzt5c1QALS0tLS0tLS0tLS3t67XpjunT1Xa1dZluP/8k32h8mHVJS0tLS0tLS0tLS0v7Ku0UJZddkiVH1pt9mhlZx0WWf9r4OKWElpaWlpaWlpaWlpb2bdqS+qYfXOUk6zKWpH1OoKPkyXTL1ZHZtLS0tLS0tLS0tLS0B2hbOPqstmNuhvK3UN2bFljMIUn9nLS0tLS0tLS0tLS0tOdo0xUGOLb8vRYqeX0VNEdZb6rkpfVoaWlpaWlpaWlpaWnfrl3mv/QE5WU9DztNJEnHq01PlX9LS0tLS0tLS0tLS0t7hHapmNLcyPvYUoosYbGX5XMC/ZwiaWlpaWlpaWlpaWlpX6ktaa7lgZCbx0hXCovtU8cmLS0tLS0tLS0tLS0t7aJ+11ahsocs+rj3PVR++2fQ0tLS0tLS0tLS0tIerE2HpZUxIoseyqlMNxUA7x+kQ9rax7PhaGlpaWlpaWlpaWlpX6nNwbCOgSyKsSrT9fBAbXPa2tTFuU2RtLS0tLS0tLS0tLS0L9O23Fz5RRKcuiRzY+aVR5/k8NnL7jpaWlpaWlpaWlpaWtq3a//7Fy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3tb9P+AdWRfGaKQfREAAAAAElFTkSuQmCC'
      }
    },
    accounts_info: null,
    tags: null
  }
}